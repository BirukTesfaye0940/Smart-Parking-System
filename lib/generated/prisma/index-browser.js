
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  created_at: 'created_at'
};

exports.Prisma.OwnerScalarFieldEnum = {
  owner_id: 'owner_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  created_at: 'created_at'
};

exports.Prisma.CityScalarFieldEnum = {
  city_id: 'city_id',
  city_name: 'city_name',
  state: 'state',
  created_at: 'created_at'
};

exports.Prisma.SubCityScalarFieldEnum = {
  sub_city_id: 'sub_city_id',
  city_id: 'city_id',
  sub_city_name: 'sub_city_name',
  created_at: 'created_at'
};

exports.Prisma.StreetAddressScalarFieldEnum = {
  street_address_id: 'street_address_id',
  sub_city_id: 'sub_city_id',
  street_address: 'street_address',
  zip_code: 'zip_code',
  created_at: 'created_at'
};

exports.Prisma.LocationScalarFieldEnum = {
  location_id: 'location_id',
  lot_id: 'lot_id',
  street_address_id: 'street_address_id',
  latitude: 'latitude',
  longitude: 'longitude',
  created_at: 'created_at'
};

exports.Prisma.ParkingLotScalarFieldEnum = {
  lot_id: 'lot_id',
  owner_id: 'owner_id',
  lot_name: 'lot_name',
  image: 'image',
  capacity: 'capacity',
  created_at: 'created_at'
};

exports.Prisma.ParkingSpaceScalarFieldEnum = {
  space_id: 'space_id',
  lot_id: 'lot_id',
  space_number: 'space_number',
  is_handicap: 'is_handicap',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.AvailabilityLogScalarFieldEnum = {
  log_id: 'log_id',
  space_id: 'space_id',
  status: 'status',
  timestamp: 'timestamp'
};

exports.Prisma.BookingScalarFieldEnum = {
  booking_id: 'booking_id',
  lot_id: 'lot_id',
  user_id: 'user_id',
  space_id: 'space_id',
  start_time: 'start_time',
  end_time: 'end_time',
  status: 'status'
};

exports.Prisma.PaymentScalarFieldEnum = {
  payment_id: 'payment_id',
  booking_id: 'booking_id',
  user_id: 'user_id',
  amount: 'amount',
  payment_method: 'payment_method',
  payment_date: 'payment_date'
};

exports.Prisma.PriceScalarFieldEnum = {
  price_id: 'price_id',
  lot_id: 'lot_id',
  price_per_hour: 'price_per_hour',
  effective_date: 'effective_date'
};

exports.Prisma.ReviewScalarFieldEnum = {
  review_id: 'review_id',
  user_id: 'user_id',
  lot_id: 'lot_id',
  rating: 'rating',
  comment: 'comment',
  review_date: 'review_date'
};

exports.Prisma.NotificationScalarFieldEnum = {
  notification_id: 'notification_id',
  owner_id: 'owner_id',
  message: 'message',
  sent_at: 'sent_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SpaceStatus = exports.$Enums.SpaceStatus = {
  available: 'available',
  unavailable: 'unavailable'
};

exports.BookStatus = exports.$Enums.BookStatus = {
  unpaid: 'unpaid',
  paid: 'paid'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  User: 'User',
  Owner: 'Owner',
  City: 'City',
  SubCity: 'SubCity',
  StreetAddress: 'StreetAddress',
  Location: 'Location',
  ParkingLot: 'ParkingLot',
  ParkingSpace: 'ParkingSpace',
  AvailabilityLog: 'AvailabilityLog',
  Booking: 'Booking',
  Payment: 'Payment',
  Price: 'Price',
  Review: 'Review',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
